@page "/EditarCandidata/{userID:guid}/{canId:int}"

@using RRProject.Models.DTOs
@using Microsoft.AspNetCore.Authorization
@using System.IdentityModel.Tokens.Jwt
@using Microsoft.IdentityModel.Logging

@inject Microsoft.JSInterop.IJSRuntime JSRuntime

@if (Candidata is null && MensagemErro is null)
{
    <ExibirSpinner />
}
else if (MensagemErro is not null)
{
    <ExibirErro MensagemErro="@MensagemErro"></ExibirErro>
}
else
{
    <div class="candidata-container">
        <img class="candidata-imagem" src="@Candidata.ImagemUrlcandidata" alt="Foto da candidata">
        <div class="candidata-info">
            <h2>@Candidata.Nome</h2>
            <p>@Candidata.Clube</p>
        </div>
    </div>
}

<div>
    <h3>Selecione as notas para os quesitos:</h3>
    <form @onsubmit="SalvarAvaliacao">
        <div class="mb-3">
            <label for="beautyScore" class="form-label">Beleza:</label>
            <select id="beautyScore" class="form-select" @bind="AvaliacaoUsuario.NotaBeleza">
                @for (int i = 1; i <= 10; i++)
                {
                    <option value="@i">@i</option>
                }
            </select>
        </div>
        <div class="mb-3">
            <label for="fantasyScore" class="form-label">Fantasia:</label>
            <select id="fantasyScore" class="form-select" @bind="AvaliacaoUsuario.NotaFantasia">
                @for (int i = 1; i <= 10; i++)
                {
                    <option value="@i">@i</option>
                }
            </select>
        </div>
        <div class="mb-3">
            <label for="presentationScore" class="form-label">Apresentação:</label>
            <select id="presentationScore" class="form-select" @bind="AvaliacaoUsuario.NotaApresentacao">
                @for (int i = 1; i <= 10; i++)
                {
                    <option value="@i">@i</option>
                }
            </select>
        </div>
        <div class="mb-3">
            <label for="comments" class="form-label">Comentário:</label>
            <textarea id="comments" class="form-control" rows="3" @bind="AvaliacaoUsuario.Comentario"></textarea>
        </div>
        <div class="d-flex justify-content-between">
            <button type="submit" class="btn btn-primary">Editar</button>
            <a href="/ClassificacaoIndividual" class="btn btn-secondary">Cancelar</a>
        </div>
    </form>
</div>

@code {
    [Parameter]
    public int CanId { get; set; }
    [Parameter]
    public Guid UserID { get; set; }
    [Inject]
    public ICandidataService CandidataService { get; set; }
    [Inject]
    public IAvaliacaoUsuarioService AvaliacaoUsuarioService { get; set; }
    [Inject]
    public NavigationManager NavigationManager { get; set; }

    public CandidataDto Candidata { get; set; }

    public string MensagemErro { get; set; }

    public AvaliacaoUsuarioDto AvaliacaoUsuario { get; set; } = new AvaliacaoUsuarioDto();

    protected override async Task OnInitializedAsync()
    {
        try
        {
            Candidata = await CandidataService.GetCandidatebyID(CanId);
            await CarregarAvaliacaoUsuario();
        }
        catch (Exception ex)
        {
            MensagemErro = ex.Message;
        }
    }

    private async Task CarregarAvaliacaoUsuario()
    {
        try
        {
            // Convertendo o Guid para string
            string userIdString = UserID.ToString();

            // Obter a lista de avaliações do usuário com base nas IDs da candidata e do usuário
            var avaliacoes = await AvaliacaoUsuarioService.GetAvaliacoesByUsuarioGuid(userIdString);

            // Selecione a primeira avaliação da lista (ou qualquer outra lógica que desejar)
            AvaliacaoUsuario = avaliacoes.FirstOrDefault(a => a.CandidataIdenti == CanId);
        }
        catch (Exception ex)
        {
            // Lidar com o erro, se necessário
            MensagemErro = ex.Message;
        }
    }

    private async Task SalvarAvaliacao()
    {
        try
        {
            // Defina a CandidataId e o UsuarioId com base nos dados disponíveis
            AvaliacaoUsuario.CandidataIdenti = CanId;

            string userIdString = UserID.ToString();
            AvaliacaoUsuario.UsuarioIdenti = userIdString;

            // Chame o serviço para salvar a avaliação
            var sucesso = await AvaliacaoUsuarioService.AlterarAvaliacao(CanId, userIdString, AvaliacaoUsuario);

            if (sucesso)
            {
                // Limpe os dados da avaliação após o salvamento bem-sucedido
                AvaliacaoUsuario = new AvaliacaoUsuarioDto();

                // Após salvar a avaliação, redirecione o usuário para a página de clubes
                NavigationManager.NavigateTo("/clubes");
            }
            else
            {
                MensagemErro = "Falha ao salvar a avaliação. Por favor, tente novamente.";
            }
        }
        catch (Exception ex)
        {
            MensagemErro = ex.Message;
        }
    }
}
